/*

	minimix.c
	Copyright (C) 2005  Nicholas J. Humfrey
	
	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>

#include <jack/jack.h>
#include <lo/lo.h>
#include <getopt.h>
#include "config.h"
#include "db.h"


#define		DEFAULT_CLIENT_NAME		"nanomixer"		// Default name of JACK client
#define		GAIN_FADE_RATE			(400.0f)	// Rate to fade at (dB per second)


float current_gain;
float desired_gain;
jack_port_t *left_port;
jack_port_t *right_port;

jack_port_t *outport[2] = {NULL, NULL};
jack_client_t *client = NULL;

unsigned int verbose = 0;
unsigned int quiet = 0;
unsigned int running = 1;

static
void signal_handler (int signum)
{
	if (!quiet) {
		switch(signum) {
			case SIGTERM:	fprintf(stderr, "Got termination signal.\n"); break;
			case SIGINT:	fprintf(stderr, "Got interupt signal.\n"); close(0); running = 0; break;
		}
	}
	running=0;
}



static
int ping_handler(const char *path, const char *types, lo_arg **argv, int argc,
		 lo_message msg, void *user_data)
{
	lo_address src = lo_message_get_source( msg );
	lo_server serv = (lo_server)user_data;
	int result;
	
	// Display the address the ping came from
	if (verbose) {
		char *url = lo_address_get_url(src);
		printf( "Got ping from: %s\n", url);
		free(url);
	}

	// Send back reply
	result = lo_send_from( src, serv, LO_TT_IMMEDIATE, "/pong", "" );
	if (result<1) fprintf(stderr, "Error: sending reply failed: %s\n", lo_address_errstr(src));

    return 0;
}

static
int wildcard_handler(const char *path, const char *types, lo_arg **argv, int argc,
		 lo_message msg, void *user_data)
{
	if (verbose) {
		fprintf(stderr, "Warning: unhandled OSC message: '%s' with args '%s'.\n", path, types);
	}

    return -1;
}

static
int set_gain_handler(const char *path, const char *types, lo_arg **argv, int argc,
		 lo_message msg, void *user_data)
{
	lo_address src = lo_message_get_source( msg );
	lo_server serv = (lo_server)user_data;
	float gain = argv[0]->f;
	int result;

	if (verbose) {
    	printf("Received channel gain change OSC message ");
		printf(" (gain=%fdB)\n", gain);
	}
	
	// Make sure gain is in range
	if (gain<-90) gain = -90;
	if (gain>90) gain = 90;
	
	// store the new value
	desired_gain = gain;
	#ifndef USE_GAINSTEP
	current_gain = gain;
	#endif

	// Send back reply
	result = lo_send_from( src, serv, LO_TT_IMMEDIATE, "/gain", "f", desired_gain );
	if (result<1) fprintf(stderr, "Error: sending reply failed: %s\n", lo_address_errstr(src));

	return 0;
}

static
int get_gain_handler(const char *path, const char *types, lo_arg **argv, int argc,
		 lo_message msg, void *user_data)
{
	lo_address src = lo_message_get_source( msg );
	lo_server serv = (lo_server)user_data;
	int result;

	// Send back reply
	result = lo_send_from( src, serv, LO_TT_IMMEDIATE, "/gain", "f", desired_gain );
	if (result<1) fprintf(stderr, "Error: sending reply failed: %s\n", lo_address_errstr(src));

	return 0;
}

static
void error_handler(int num, const char *msg, const char *path)
{
    fprintf(stderr, "LibLO server error %d in path %s: %s\n", num, path, msg);
    fflush(stdout);
}

static
void shutdown_callback_jack(void *arg)
{
	running = 0;
}


static
int process_jack_audio(jack_nframes_t nframes, void *arg)
{
	jack_default_audio_sample_t *out_left =
		jack_port_get_buffer(outport[0], nframes);
	jack_default_audio_sample_t *out_right =
		jack_port_get_buffer(outport[1], nframes);
	jack_nframes_t n=0;
	
	// Put silence into the outputs
	for ( n=0; n<nframes; n++ ) {
		out_left[ n ] = 0;
		out_right[ n ] = 0;
	}

	// Mix each input into the output buffer
	float mix_gain;
	jack_default_audio_sample_t *in_left =
		jack_port_get_buffer(left_port, nframes);
	jack_default_audio_sample_t *in_right =
		jack_port_get_buffer(right_port, nframes);
	
	// Adjust the current gain towards desired gain ?
	#ifdef USE_GAINSTEP
	if (current_gain != desired_gain) {
		float fade_step = (GAIN_FADE_RATE / jack_get_sample_rate( client )) * nframes;
		if (current_gain < desired_gain-fade_step) {
			current_gain += fade_step;
		} else if (current_gain > desired_gain+fade_step) {
			current_gain -= fade_step;
		} else {
			current_gain = desired_gain;
		}
	}
	#endif
	
	// Mix the audio
	mix_gain = db2lin( current_gain );
	for ( n=0; n<nframes; n++ ) {
		out_left[ n ] += (in_left[ n ] * mix_gain);
		out_right[ n ] += (in_right[ n ] * mix_gain);
	}

	return 0;
}



static
lo_server_thread init_osc( const char * port ) 
{
	lo_server_thread st = NULL;
	lo_server serv = NULL;
	
	// Create new server
	st = lo_server_thread_new( port, error_handler );
	if (!st) return NULL;
	
	// Add the methods
	serv = lo_server_thread_get_server( st );
	lo_server_thread_add_method(st, "/set_gain", "f", set_gain_handler, serv);
	lo_server_thread_add_method(st, "/get_gain", "", get_gain_handler, serv);
	lo_server_thread_add_method( st, "/ping", "", ping_handler, serv);

	// add method that will match any path and args
	lo_server_thread_add_method(st, NULL, NULL, wildcard_handler, serv);

	// Start the thread
	lo_server_thread_start(st);

	if (!quiet) {
		char *url = lo_server_thread_get_url( st );
		printf( "OSC server URL: %s\n", url );
		free(url);
	}
	
	return st;
}

static
void finish_osc( lo_server_thread st )
{
	if (verbose) printf( "Stopping OSC server thread.\n");

	lo_server_thread_stop( st );
	lo_server_thread_free( st );
	
}


static
void init_jack( const char * client_name ) 
{
	jack_status_t status;

	// Register with Jack
	if ((client = jack_client_open(client_name, JackNullOption, &status)) == 0) {
		fprintf(stderr, "Failed to start jack client: %d\n", status);
		exit(1);
	}
	if (!quiet) printf("JACK client registered as '%s'.\n", jack_get_client_name( client ) );

	// Create our pair of output ports
	if (!(outport[0] = jack_port_register(client, "out_left", JACK_DEFAULT_AUDIO_TYPE, JackPortIsOutput, 0))) {
		fprintf(stderr, "Cannot register output port 'out_left'.\n");
		exit(1);
	}
	
	if (!(outport[1] = jack_port_register(client, "out_right", JACK_DEFAULT_AUDIO_TYPE, JackPortIsOutput, 0))) {
		fprintf(stderr, "Cannot register output port 'out_right'.\n");
		exit(1);
	}
	
	// Register shutdown callback
	jack_on_shutdown (client, shutdown_callback_jack, NULL );

	// Register the peak audio callback
	jack_set_process_callback(client, process_jack_audio, 0);
}

static
void finish_jack( jack_client_t *client )
{
	// Leave the Jack graph
	jack_client_close(client);
}

static
jack_port_t* create_input_port( const char* side )
{
	int port_name_size = jack_port_name_size();
	char *port_name = malloc( port_name_size );
	jack_port_t *port;
	
	snprintf( port_name, port_name_size, "in_%s", side );
	port = jack_port_register(client, port_name, JACK_DEFAULT_AUDIO_TYPE, JackPortIsInput, 0);
	if (!port) {
		fprintf(stderr, "Cannot register input port '%s'.\n", port_name);
		exit(1);
	}
	
	return port;
}

/* Display how to use this program */
static
int usage( )
{
	printf("JackMiniMix version %s\n\n", PACKAGE_VERSION);
	printf("Usage: %s [options]\n", PACKAGE_NAME);
	printf("   -p <port>     Set the UDP port number for OSC\n");
	printf("   -n <name>     Name for this JACK client (default nanomix)\n");
	printf("   -v            Enable verbose mode\n");
	printf("   -q            Enable quiet mode\n");
	printf("\n");
	exit(1);
}


int main(int argc, char *argv[])
{
	lo_server_thread server_thread = NULL;
	char *client_name = DEFAULT_CLIENT_NAME;
	char* osc_port = NULL;
	int opt;
	
	
	// Parse the command line arguments
	while ((opt = getopt(argc, argv, "n:p:vqh")) != -1) {
		switch (opt) {
			case 'n':  client_name = optarg; break;
			case 'p':  osc_port = optarg; break;
			case 'v':  verbose++; break;
			case 'q':  quiet++; break;
			default:
				fprintf(stderr, "Unknown option '%c'.\n", (char)opt);
			case 'h':
				usage( argv[0] );
				break;
		}
	}
    argc -= optind;
    argv += optind;
	
	// Validate parameters
	if (quiet && verbose) {
    	fprintf(stderr, "Can't be quiet and verbose at the same time.\n");
    	usage();
	}

	// Dislay welcoming message
	if (verbose) printf("Starting JackNanoMix version %s.\n",
							VERSION);

	// Set signal handlers
	signal(SIGTERM, signal_handler);
	signal(SIGINT, signal_handler);


	// Setup JACK
	init_jack( client_name );

	// Create the channel descriptors
	current_gain=0.0f;
	desired_gain=0.0f;
	left_port = create_input_port( "left" );
	right_port = create_input_port( "right" );

	// Set JACK running
	if (jack_activate(client)) {
		fprintf(stderr, "Cannot activate client.\n");
		exit(1);
	}

	// Setup OSC
	server_thread = init_osc( osc_port );


	// Sleep until we are done (work is done in threads)
	while (running) {
    scanf("%f", &desired_gain);
    printf("new desired gain: %.2f", desired_gain);
		usleep(1000);
	}
	
	
	// Cleanup
	finish_osc( server_thread );
	finish_jack( client );

	return 0;
}

